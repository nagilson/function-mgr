






*^templateExample
*&C++
*%
#include <iostream>
#include <string>

using namespace std;

template <typename T>
inline T const& Max (T const& a, T const& b) { 
   return a < b ? b:a; 
}

int main () {
   int i = 39;
   int j = 20;
   cout << "Max(i, j): " << Max(i, j) << endl; 

   double f1 = 13.5; 
   double f2 = 20.7; 
   cout << "Max(f1, f2): " << Max(f1, f2) << endl; 

   string s1 = "Hello"; 
   string s2 = "World"; 
   cout << "Max(s1, s2): " << Max(s1, s2) << endl; 

   return 0;
}
*%.




*^bookoverloads
*&C++
*%
#include "stdafx.h"
#include <cassert>
#include <iostream>

class A {
private:
	int number;
	friend std::ostream& operator<<(std::ostream &stream, const A &);
public:
	A() {
		this->number = 0;
	}
	A(int number){
		this->number = number;
	}
	A operator+(const A &other);
	const bool operator==(const A &other) const;
	const A operator=(A other); // not necessary
	friend void swap(A &first, A &second) {
		using std::swap;
		swap(first.number, second.number);
	}
	A operator++();
	A operator++(int);
	int& operator[](int index) {
		if (0 <= index && index < 1) {
			return number;
		}
		else {
			throw("Invalid range.");
		}
	}
	const int& operator[](int index) const {
		if (0 <= index && index < 1) {
			return number;
		}
		else {
			throw("Invalid range.");
		}
	}
};

const A A::operator=(A other) {
	A temp(other);
	swap(*this, other);
	return *this;
}

A A::operator++() {
	++(this->number);
	return *this;
}

A A::operator++(int) {
	/* Post DEC */

	A temp = *this;
	(this->number)++;
	return temp;
}

A A::operator+(const A &other) {
	A sum;
	sum.number = number + other.number;
	return sum;
}

const bool A::operator==(const A &other) const {
	return (this->number == other.number);
}

std::ostream& operator<< (std::ostream& stream, const A& object) {
	stream << object.number << std::endl;
	return stream;
}

int main() {
	A a1(2);
	A a2(3);
	A a3 = a1 + a2;
	std::cout << a3;
	if (a1 == a2) {
		std::cout << "Is true!\n";
	}
	else {
		std::cout << "Is false (Should be) \n!";
	}
	a3 = a1;
	std::cout << "A3 (SB 2) : " << a3 << " A1: " << a1;
	a3++;
	++a3;
	std::cout << a3[1];
	std::system("pause");
	return 0;
}












































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































*%.


*^getValidInt
*&C++
*%
int getValidInt(std::string prompt) {
	bool done = false;
	int input;
	do {
		std::cout << prompt;
		if (std::cin) {
			done = true;
		}
		else {
			std::cout << "Please try again, invalid.";
			std::cin.clear();
		}
		while (std::cin.get() != '\n');
	} while (!done);
	return input;
}



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































*%.





*^->OVERLOAD
*&C++
*%
// OperatorArr.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
class object {
public:
	 object *operator->() {
		return this; 
	}
	 int a = 0; 
};

int main()
{
	object O;
	std::cout << O->a;
    return 0;
}
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































*%.
